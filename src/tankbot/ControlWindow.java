/*
 * Copyright Luke Wallin 2012
 */
package tankbot;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;

/**
 *
 * @author Luke
 */
public class ControlWindow extends javax.swing.JFrame {

    public final static int MAX_SLIDER_VALUE = 1000;

    private final Client client;
    private final MotorState motorState;
    private String defaultIp;
    private int defaultport;
    //for updating from motorstate
    private final Timer motorStateTimer;
    //how often to poll for new motor state
    private final static long MOTOR_STATE_UPDATE_PERIOD_MS = 50;

    private class MyDispatcher implements KeyEventDispatcher {

        @Override
        public boolean dispatchKeyEvent(KeyEvent e) {
            if (e.getID() == KeyEvent.KEY_PRESSED) {
                motorState.keyDown(e);
            } else if (e.getID() == KeyEvent.KEY_RELEASED) {
                motorState.keyUp(e);
            }
            return false;
        }
    }

    /**
     * Creates new form ControlWindow
     *
     * @param _client
     */
    public ControlWindow(Client _client, MotorState motorState, String defaultIp, int defaultPort) {
        this.client = _client;
        this.motorState = motorState;
        this.defaultIp = defaultIp;
        this.defaultport = defaultPort;

        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new MyDispatcher());

        this.motorStateTimer = new Timer("MotorStateTimer");
        this.motorStateTimer.scheduleAtFixedRate(new TimerTask() {

            @Override
            public void run() {
                updateUIFromMotorState();
            }
        }, (long) MOTOR_STATE_UPDATE_PERIOD_MS, MOTOR_STATE_UPDATE_PERIOD_MS);

        initComponents();
    }

    private void updateUIFromMotorState() {

        if (!this.motorState.hasThrottle()) {
            //the UI, not the joystick, control the throttle
            this.motorState.setMaxSpeed(((float) this.throttleSlider.getValue()) / ((float) MAX_SLIDER_VALUE));
        }

        //assuming that if motor 0 is braked, the handbrake is on
        updateMotorState(this.motorState.getMotorCommand(0).speed, this.motorState.getMotorCommand(1).speed, this.motorState.getMotorCommand(0).brake, this.motorState.getMaxSpeed());

    }

    /**
     * Speeds from -1 to 1
     *
     * @param m0Speed
     * @param m1Speed
     * @param handbreak
     * @param throttle maximum speed allowed in any direction
     */
    private void updateMotorState(float m0Speed, float m1Speed, boolean handbrake) {

        motor0Slider.setValue(Math.round(m0Speed * MAX_SLIDER_VALUE));

        motor1Slider.setValue(Math.round(m1Speed * MAX_SLIDER_VALUE));

        if(handbrake){
            
        }
    }

    private void updateMotorState(float m0Speed, float m1Speed, boolean handbrake, float throttle) {
        throttleSlider.setValue(Math.round(throttle * MAX_SLIDER_VALUE));

        motor1Slider.setMaximum(Math.round(throttle * MAX_SLIDER_VALUE));
        motor1Slider.setMinimum(-Math.round(throttle * MAX_SLIDER_VALUE));

        motor0Slider.setMaximum(Math.round(throttle * MAX_SLIDER_VALUE));
        motor0Slider.setMinimum(-Math.round(throttle * MAX_SLIDER_VALUE));

        updateMotorState(m0Speed, m1Speed, handbrake);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        motor1Slider = new javax.swing.JSlider();
        motor0Slider = new javax.swing.JSlider();
        throttleSlider = new javax.swing.JSlider();
        handbreakButton = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        optionsMenu = new javax.swing.JMenu();
        serverIP = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        motor1Slider.setMaximum(MAX_SLIDER_VALUE);
        motor1Slider.setMinimum(-MAX_SLIDER_VALUE);
        motor1Slider.setOrientation(javax.swing.JSlider.VERTICAL);
        motor1Slider.setValue(0);

        motor0Slider.setMaximum(MAX_SLIDER_VALUE);
        motor0Slider.setMinimum(-MAX_SLIDER_VALUE);
        motor0Slider.setOrientation(javax.swing.JSlider.VERTICAL);
        motor0Slider.setValue(0);

        throttleSlider.setMaximum(MAX_SLIDER_VALUE);
        throttleSlider.setValue(MAX_SLIDER_VALUE);

        handbreakButton.setText("Handbreak");

        optionsMenu.setText("Options");

        serverIP.setText("Server IP");
        serverIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverIPActionPerformed(evt);
            }
        });
        optionsMenu.add(serverIP);

        jMenuBar1.add(optionsMenu);

        helpMenu.setText("Help");
        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(throttleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(motor0Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addComponent(motor1Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 149, Short.MAX_VALUE)
                .addComponent(handbreakButton)
                .addGap(60, 60, 60))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(motor1Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(motor0Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(98, 98, 98)
                                .addComponent(throttleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(59, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(handbreakButton)
                        .addGap(181, 181, 181))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void serverIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverIPActionPerformed
        //bring up dialogue for IP and port of server
        String ip = JOptionPane.showInputDialog(rootPane, "IP of server", this.defaultIp);
        if (ip != null) {
            client.connectTo(ip, this.defaultport);
        }
    }//GEN-LAST:event_serverIPActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

        this.motorState.keyDown(evt);
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        this.motorState.keyUp(evt);
    }//GEN-LAST:event_formKeyReleased

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        //client.keyDown(null);
    }//GEN-LAST:event_formMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton handbreakButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSlider motor0Slider;
    private javax.swing.JSlider motor1Slider;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JMenuItem serverIP;
    private javax.swing.JSlider throttleSlider;
    // End of variables declaration//GEN-END:variables
}
